{
  "rules": {
    "categories": {
      ".validate": "newData.hasChildren()",
      "name": {
        ".validate": "(newData.isString() && newData.isString())"
      },
      "abbreviation": {
        ".validate": "(newData.isString() && newData.isString())"
      },
      "type": {
        ".validate": "(newData.isString() && newData.isString())"
      },
      "logo": {
        ".validate": "(newData.isString() && newData.isString())"
      },
      "$other": {
        ".validate": "false"
      },
      ".read": "true",
      ".write": "((auth != null && newData.parent().child('users').child(auth.uid).child('role').val() == 'admin') && (auth != null && newData.parent().child('users').child(auth.uid).child('role').val() == 'admin'))"
    },
    "events": {
      ".validate": "newData.hasChildren(['createDate'])",
      "category": {
        ".validate": "newData.isString()"
      },
      "createDate": {
        ".validate": "newData.isString()"
      },
      "date": {
        ".validate": "newData.isString()"
      },
      "entryFee": {
        ".validate": "newData.isNumber()"
      },
      "format": {
        ".validate": "newData.isString()"
      },
      "link": {
        ".validate": "newData.isString()"
      },
      "name": {
        ".validate": "newData.isString()"
      },
      "notes": {
        ".validate": "newData.isString()"
      },
      "playerSlots": {
        ".validate": "newData.isNumber()"
      },
      "prizes": {
        ".validate": "newData.isString()"
      },
      "published": {
        ".validate": "newData.isBoolean()"
      },
      "rulesLevel": {
        ".validate": "newData.isString()"
      },
      "time": {
        ".validate": "newData.isString()"
      },
      "$other": {
        ".validate": "false"
      },
      ".read": "true",
      ".write": "(auth != null && newData.parent().child('users').child(auth.uid).child('role').val() == 'admin')"
    },
    "highlights": {
      ".validate": "newData.hasChildren(['createDate'])",
      "active": {
        ".validate": "newData.isBoolean()"
      },
      "createDate": {
        ".validate": "newData.isString()"
      },
      "date": {
        ".validate": "newData.isString()"
      },
      "image": {
        ".validate": "newData.isString()"
      },
      "name": {
        ".validate": "newData.isString()"
      },
      "$other": {
        ".validate": "false"
      },
      ".read": "true",
      ".write": "(auth != null && newData.parent().child('users').child(auth.uid).child('role').val() == 'admin')"
    },
    "news": {
      ".validate": "newData.hasChildren(['createDate'])",
      "active": {
        ".validate": "newData.isBoolean()"
      },
      "createDate": {
        ".validate": "newData.isString()"
      },
      "date": {
        ".validate": "newData.isString()"
      },
      "image": {
        ".validate": "newData.isString()"
      },
      "name": {
        ".validate": "newData.isString()"
      },
      "text": {
        ".validate": "newData.isString()"
      },
      "$other": {
        ".validate": "false"
      },
      ".read": "true",
      ".write": "(auth != null && newData.parent().child('users').child(auth.uid).child('role').val() == 'admin')"
    },
    "participations": {
      ".validate": "newData.hasChildren()",
      "comment": {
        ".validate": "newData.isString()"
      },
      "date": {
        ".validate": "newData.isString()"
      },
      "firstName": {
        ".validate": "newData.isString()"
      },
      "lastName": {
        ".validate": "newData.isString()"
      },
      "userId": {
        ".validate": "newData.isString()"
      },
      "$other": {
        ".validate": "false"
      },
      ".read": "true",
      ".write": "auth != null"
    },
    "settings": {
      ".read": "true",
      ".write": "(auth != null && newData.parent().child('users').child(auth.uid).child('role').val() == 'admin')"
    },
    "storecredit": {
      "$userid": {
        ".read": "((auth != null && auth.uid == $userid) || (auth != null && root.child('users').child(auth.uid).child('role').val() == 'admin'))",
        ".write": "(auth != null && newData.parent().parent().child('users').child(auth.uid).child('role').val() == 'admin')"
      },
      ".read": "(auth != null && root.child('users').child(auth.uid).child('role').val() == 'admin')",
      ".write": "(auth != null && newData.parent().child('users').child(auth.uid).child('role').val() == 'admin')"
    },
    "uploadedCategoryLogos": {
      ".validate": "newData.hasChildren()",
      "downloadURL": {
        ".validate": "newData.isString()"
      },
      "name": {
        ".validate": "newData.isString()"
      },
      "activeLogo": {
        ".validate": "newData.isBoolean()"
      },
      "$other": {
        ".validate": "false"
      },
      ".read": "true",
      ".write": "(auth != null && newData.parent().child('users').child(auth.uid).child('role').val() == 'admin')"
    },
    "uploadedFiles": {
      ".validate": "newData.hasChildren()",
      "downloadURL": {
        ".validate": "newData.isString()"
      },
      "name": {
        ".validate": "newData.isString()"
      },
      "activeLogo": {
        ".validate": "newData.isBoolean()"
      },
      "$other": {
        ".validate": "false"
      },
      ".read": "true",
      ".write": "(auth != null && newData.parent().child('users').child(auth.uid).child('role').val() == 'admin')"
    },
    "uploadedHighlightBanners": {
      ".validate": "newData.hasChildren()",
      "downloadURL": {
        ".validate": "newData.isString()"
      },
      "name": {
        ".validate": "newData.isString()"
      },
      "activeLogo": {
        ".validate": "newData.isBoolean()"
      },
      "$other": {
        ".validate": "false"
      },
      ".read": "true",
      ".write": "(auth != null && newData.parent().child('users').child(auth.uid).child('role').val() == 'admin')"
    },
    "uploadedNewsImages": {
      ".validate": "newData.hasChildren()",
      "downloadURL": {
        ".validate": "newData.isString()"
      },
      "name": {
        ".validate": "newData.isString()"
      },
      "activeLogo": {
        ".validate": "newData.isBoolean()"
      },
      "$other": {
        ".validate": "false"
      },
      ".read": "true",
      ".write": "(auth != null && newData.parent().child('users').child(auth.uid).child('role').val() == 'admin')"
    },
    "uploadedStoreinfoFiles": {
      ".validate": "newData.hasChildren()",
      "downloadURL": {
        ".validate": "newData.isString()"
      },
      "name": {
        ".validate": "newData.isString()"
      },
      "activeLogo": {
        ".validate": "newData.isBoolean()"
      },
      "$other": {
        ".validate": "false"
      },
      ".read": "true",
      ".write": "(auth != null && newData.parent().child('users').child(auth.uid).child('role').val() == 'admin')"
    },
    "users": {
      "$userid": {
        ".validate": "newData.hasChildren()",
        "avatarUrl": {
          ".validate": "newData.isString()"
        },
        "dciNumber": {
          ".validate": "newData.isNumber()"
        },
        "displayName": {
          ".validate": "newData.isString()"
        },
        "email": {
          ".validate": "newData.isString()"
        },
        "providerData": {
          ".validate": "newData.hasChildren()"
        },
        "role": {
          ".validate": "newData.isString()"
        },
        "uid": {
          ".validate": "newData.isNumber()"
        },
        "username": {
          ".validate": "newData.isString()"
        },
        "$other": {
          ".validate": "false"
        },
        ".read": "((auth != null && auth.uid == $userid) || (auth != null && root.child('users').child(auth.uid).child('role').val() == 'admin'))",
        ".write": "((auth != null && auth.uid == $userid) || (auth != null && newData.parent().parent().child('users').child(auth.uid).child('role').val() == 'admin'))"
      },
      ".read": "(auth != null && root.child('users').child(auth.uid).child('role').val() == 'admin')",
      ".write": "(auth != null && newData.parent().child('users').child(auth.uid).child('role').val() == 'admin')"
    }
  }
}
