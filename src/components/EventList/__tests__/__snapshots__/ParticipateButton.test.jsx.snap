// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ParticipateButton tests Compares ParticipateButton to snapshot when the user HAS NOT participated 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ParticipateButton
    eventId="mockEventId1"
    participations={
      Object {
        "mockEventId1": Object {
          "mockUserId": Object {
            "comment": "Jee",
            "date": "2018-06-23T09:40:26.992Z",
            "firstName": "Test",
            "lastName": "Person",
            "userId": "mockUserId",
          },
        },
      }
    }
    profile={
      Object {
        "avatarUrl": "https://foo.com/picture",
        "dciNumber": "123512351112",
        "displayName": "Test Person",
        "email": "fake@fake.com",
        "firstName": "Test",
        "isEmpty": false,
        "isLoaded": true,
        "lastName": "Person",
        "providerData": Array [
          Object {
            "displayName": "Test Person",
            "email": "fake@fake.com",
            "photoURL": "https://foo.com/picture",
            "providerId": "facebook.com",
            "uid": "1234567890",
          },
        ],
        "role": "admin",
      }
    }
    userId="mockUserId"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <button
        className="cancelbutton button is-rounded is-danger"
        onClick={[Function]}
      >
        <p>
          <Translate
            id="cancelparticipate"
          />
        </p>
        <span
          className="icon"
        >
          <i
            className="fas fa-sign-out-alt"
          />
        </span>
      </button>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p>
            <Translate
              id="cancelparticipate"
            />
          </p>,
          <span
            className="icon"
          >
            <i
              className="fas fa-sign-out-alt"
            />
          </span>,
        ],
        "className": "cancelbutton button is-rounded is-danger",
        "onClick": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Translate
              id="cancelparticipate"
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "cancelparticipate",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <i
              className="fas fa-sign-out-alt"
            />,
            "className": "icon",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "fas fa-sign-out-alt",
            },
            "ref": null,
            "rendered": null,
            "type": "i",
          },
          "type": "span",
        },
      ],
      "type": "button",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <button
          className="cancelbutton button is-rounded is-danger"
          onClick={[Function]}
        >
          <p>
            <Translate
              id="cancelparticipate"
            />
          </p>
          <span
            className="icon"
          >
            <i
              className="fas fa-sign-out-alt"
            />
          </span>
        </button>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p>
              <Translate
                id="cancelparticipate"
              />
            </p>,
            <span
              className="icon"
            >
              <i
                className="fas fa-sign-out-alt"
              />
            </span>,
          ],
          "className": "cancelbutton button is-rounded is-danger",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Translate
                id="cancelparticipate"
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "id": "cancelparticipate",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <i
                className="fas fa-sign-out-alt"
              />,
              "className": "icon",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "fas fa-sign-out-alt",
              },
              "ref": null,
              "rendered": null,
              "type": "i",
            },
            "type": "span",
          },
        ],
        "type": "button",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`ParticipateButton tests Compares ParticipateButton to snapshot when the user HAS participated 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ParticipateButton
    eventId="mockEventId1"
    participations={
      Object {
        "mockEventId1": Object {
          "mockUserId": Object {
            "comment": "Jee",
            "date": "2018-06-23T09:40:26.992Z",
            "firstName": "Test",
            "lastName": "Person",
            "userId": "mockUserId",
          },
        },
      }
    }
    profile={
      Object {
        "avatarUrl": "https://foo.com/picture",
        "dciNumber": "123512351112",
        "displayName": "Test Person",
        "email": "fake@fake.com",
        "firstName": "Test",
        "isEmpty": false,
        "isLoaded": true,
        "lastName": "Person",
        "providerData": Array [
          Object {
            "displayName": "Test Person",
            "email": "fake@fake.com",
            "photoURL": "https://foo.com/picture",
            "providerId": "facebook.com",
            "uid": "1234567890",
          },
        ],
        "role": "admin",
      }
    }
    userId="mockUserId"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <p>
          <Translate
            id="participate"
          />
        </p>,
        <span
          className="icon"
        >
          <i
            className="fas fa-sign-in-alt"
          />
        </span>,
      ],
      "className": "participatebutton button is-rounded is-primary",
      "onClick": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Translate
            id="participate"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": "participate",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <i
            className="fas fa-sign-in-alt"
          />,
          "className": "icon",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "fas fa-sign-in-alt",
          },
          "ref": null,
          "rendered": null,
          "type": "i",
        },
        "type": "span",
      },
    ],
    "type": "button",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p>
            <Translate
              id="participate"
            />
          </p>,
          <span
            className="icon"
          >
            <i
              className="fas fa-sign-in-alt"
            />
          </span>,
        ],
        "className": "participatebutton button is-rounded is-primary",
        "onClick": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Translate
              id="participate"
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "participate",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <i
              className="fas fa-sign-in-alt"
            />,
            "className": "icon",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "fas fa-sign-in-alt",
            },
            "ref": null,
            "rendered": null,
            "type": "i",
          },
          "type": "span",
        },
      ],
      "type": "button",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`ParticipateButton tests Tries to click cancel participation button 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ParticipateButton
    eventId="mockEventId1"
    participations={
      Object {
        "mockEventId1": Object {
          "mockUserId": Object {
            "comment": "Jee",
            "date": "2018-06-23T09:40:26.992Z",
            "firstName": "Test",
            "lastName": "Person",
            "userId": "mockUserId",
          },
        },
      }
    }
    profile={
      Object {
        "avatarUrl": "https://foo.com/picture",
        "dciNumber": "123512351112",
        "displayName": "Test Person",
        "email": "fake@fake.com",
        "firstName": "Test",
        "isEmpty": false,
        "isLoaded": true,
        "lastName": "Person",
        "providerData": Array [
          Object {
            "displayName": "Test Person",
            "email": "fake@fake.com",
            "photoURL": "https://foo.com/picture",
            "providerId": "facebook.com",
            "uid": "1234567890",
          },
        ],
        "role": "admin",
      }
    }
    userId="mockUserId"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <button
        className="cancelbutton button is-rounded is-danger"
        onClick={[Function]}
      >
        <p>
          <Translate
            id="cancelparticipate"
          />
        </p>
        <span
          className="icon"
        >
          <i
            className="fas fa-sign-out-alt"
          />
        </span>
      </button>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p>
            <Translate
              id="cancelparticipate"
            />
          </p>,
          <span
            className="icon"
          >
            <i
              className="fas fa-sign-out-alt"
            />
          </span>,
        ],
        "className": "cancelbutton button is-rounded is-danger",
        "onClick": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Translate
              id="cancelparticipate"
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "cancelparticipate",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <i
              className="fas fa-sign-out-alt"
            />,
            "className": "icon",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "fas fa-sign-out-alt",
            },
            "ref": null,
            "rendered": null,
            "type": "i",
          },
          "type": "span",
        },
      ],
      "type": "button",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <button
          className="cancelbutton button is-rounded is-danger"
          onClick={[Function]}
        >
          <p>
            <Translate
              id="cancelparticipate"
            />
          </p>
          <span
            className="icon"
          >
            <i
              className="fas fa-sign-out-alt"
            />
          </span>
        </button>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p>
              <Translate
                id="cancelparticipate"
              />
            </p>,
            <span
              className="icon"
            >
              <i
                className="fas fa-sign-out-alt"
              />
            </span>,
          ],
          "className": "cancelbutton button is-rounded is-danger",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Translate
                id="cancelparticipate"
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "id": "cancelparticipate",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <i
                className="fas fa-sign-out-alt"
              />,
              "className": "icon",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "fas fa-sign-out-alt",
              },
              "ref": null,
              "rendered": null,
              "type": "i",
            },
            "type": "span",
          },
        ],
        "type": "button",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`ParticipateButton tests Tries to click participation button 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ParticipateButton
    eventId="mockEventId1"
    participations={
      Object {
        "mockEventId1": Object {
          "mockUserId": Object {
            "comment": "Jee",
            "date": "2018-06-23T09:40:26.992Z",
            "firstName": "Test",
            "lastName": "Person",
            "userId": "mockUserId",
          },
        },
      }
    }
    profile={
      Object {
        "avatarUrl": "https://foo.com/picture",
        "dciNumber": "123512351112",
        "displayName": "Test Person",
        "email": "fake@fake.com",
        "firstName": "Test",
        "isEmpty": false,
        "isLoaded": true,
        "lastName": "Person",
        "providerData": Array [
          Object {
            "displayName": "Test Person",
            "email": "fake@fake.com",
            "photoURL": "https://foo.com/picture",
            "providerId": "facebook.com",
            "uid": "1234567890",
          },
        ],
        "role": "admin",
      }
    }
    userId="mockUserId"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <p>
          <Translate
            id="participate"
          />
        </p>,
        <span
          className="icon"
        >
          <i
            className="fas fa-sign-in-alt"
          />
        </span>,
      ],
      "className": "participatebutton button is-rounded is-primary",
      "onClick": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Translate
            id="participate"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": "participate",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <i
            className="fas fa-sign-in-alt"
          />,
          "className": "icon",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "fas fa-sign-in-alt",
          },
          "ref": null,
          "rendered": null,
          "type": "i",
        },
        "type": "span",
      },
    ],
    "type": "button",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p>
            <Translate
              id="participate"
            />
          </p>,
          <span
            className="icon"
          >
            <i
              className="fas fa-sign-in-alt"
            />
          </span>,
        ],
        "className": "participatebutton button is-rounded is-primary",
        "onClick": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Translate
              id="participate"
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "participate",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <i
              className="fas fa-sign-in-alt"
            />,
            "className": "icon",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "fas fa-sign-in-alt",
            },
            "ref": null,
            "rendered": null,
            "type": "i",
          },
          "type": "span",
        },
      ],
      "type": "button",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
